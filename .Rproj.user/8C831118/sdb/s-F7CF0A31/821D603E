{
    "collab_server" : "",
    "contents" : "# This file contains functions used to get item data, admin data, etc. , and generate dataframes for analysis\nimport_all_library<- function(){\n  library(tidyr)\n  library(purrr)\n  library(readr)\n  library(ggplot2)\n  library(langcog)\n  library(boot)\n  library(lazyeval)\n  library(dplyr)\n  library(wordbankr)\n  library(directlabels)\n  library(scales)\n  library(stringr)\n  library(lmtest)\n}\n######################################################################################################################\nget_lang_item_data <- function(lang, lang_form = \"WS\", lex_class = \"nouns\") {\n\n  item_data <- get_item_data(language = lang, form = lang_form) %>%\n    select(num_item_id, definition, type, lexical_class, uni_lemma) %>%\n    filter(type == \"word\", lexical_class == lex_class) %>%\n    rename(item = num_item_id)\n  \n  #Initialize every item as NA (NOT yet learnt)\n  lang_item <- item_data %>%\n    select(item, definition, uni_lemma) %>%\n    mutate(age = NA)\n  \n  return(lang_item)\n}\n\n######################################################################################################################\n# get only \"useful\" admin data (where production is not NA)\nget_lang_admin_data <- function(lang, lang_form = \"WS\") {\n  #get the kids' data_id from every age\n  admin_data <- get_administration_data() %>%\n    filter(form == lang_form, !is.na(production), language == lang) %>%\n    select(data_id, age) %>%\n    arrange(age)\n  \n  return(admin_data)\n}\n\n######################################################################################################################\n# See how many kids we have in every age\nget_kids_by_age <- function(admin_data) {\n  #get number of kids by age\n  nkids_by_age <- admin_data %>%\n    group_by(age) %>%\n    summarise(n = n())\n  return(nkids_by_age)\n}\n\n######################################################################################################################\n#get \"produces\" instrument data \nget_lang_instr_data <- function(lang, lang_form = \"WS\") {\n  instr_data <- get_instrument_data(instrument_language = lang,\n                                    instrument_form = lang_form) %>%\n    filter(value == \"produces\") %>%\n    arrange(num_item_id) %>%\n    rename(item = num_item_id)\n  \n  return(instr_data)\n}\n\n######################################################################################################################\n#calculate the age of acquisition\nget_lang_aoa <- function(item_data, admin_data, instr_data) {\n  nkids_by_age <- get_kids_by_age(admin_data)\n  ages<- nkids_by_age$age\n  \n  for (cur_age in ages) {\n    rem_item <- item_data %>% filter(is.na(age))\n    current_age_id <- admin_data %>% filter(age == cur_age)\n    current_instr <- instr_data %>% \n      filter(data_id %in% current_age_id$data_id)\n    for (w in rem_item$item) {\n      proportion <- sum(current_instr$item == w) / nkids_by_age$n[which(ages==cur_age)]\n      if (proportion >= 0.5) {\n        item_data$age[which(item_data$item == w)] = cur_age\n      }\n    }\n  }\n  word_aoa<- item_data %>% filter(!is.na(age))\n  return(word_aoa)\n}\n\n######################################################################################################################\n\n#check how many words are learnt each age\nget_nwords_by_age <- function(word_aoa) {\n  nwords_by_age <- word_aoa %>%\n    arrange(age) %>%\n    group_by(age) %>%\n    summarise(n = n())\n  \n  return(nwords_by_age)\n}\n\n######################################################################################################################\n#make a final dataframe\nmake_aoa_dataframe_helper <- function(word_aoa) {\n  ages<- get_nwords_by_age(word_aoa)$age\n  df <- data.frame()\n  for (i in ages) {\n    rem_words <- word_aoa %>% filter(age >= i)\n    rem_lemma <- c(rem_words$uni_lemma)\n    rem_def <- c(rem_words$definition)\n    rem_item<- c(rem_words$item)\n    corr_age <- rep(i, times = length(rem_lemma))\n    curr_df <- data.frame(corr_age, rem_item, rem_lemma, rem_def)\n    df <- rbind(df, curr_df)\n  }  \n  df <- df %>% rename(uni_lemma = rem_lemma, definition=rem_def, item=rem_item)%>%\n    left_join(word_aoa %>% select(item, age)) %>%\n    mutate(learned = as.numeric(age == corr_age)) %>%\n    select(corr_age, item, definition, uni_lemma,learned) %>%\n    rename(age = corr_age) %>%\n    arrange(age, item)\n  return(df)\n}\n\n\n######################################################################################################################\nmake_aoa_dataframe <- function(lang, lang_form = \"WS\", lex_class = \"nouns\") {\n  item_data <- get_lang_item_data(lang = lang,\n                                  lang_form = lang_form,\n                                  lex_class = lex_class)\n  admin_data <-\n    get_lang_admin_data(lang = lang, lang_form = lang_form)\n  instr_data <-\n    get_lang_instr_data(lang = lang, lang_form = lang_form)\n  word_aoa <-\n    get_lang_aoa(item_data = item_data,\n                 admin_data = admin_data,\n                 instr_data = instr_data)\n  \n  return(make_aoa_dataframe_helper(word_aoa))\n}\n\n######################################################################################################################\ntrim_all_unilemma<-function(unilemma_list){\n  unilemma_list<- unilemma_list %>%\n    mutate(uni_lemma=gsub(\" \\\\s*\\\\([^\\\\)]+\\\\)\",\"\", uni_lemma)) %>%\n    mutate(uni_lemma=gsub(\"[*].*$\",\"\", uni_lemma)) %>%\n    filter(!is.na(uni_lemma))\n  return(unilemma_list)\n}\n\n######################################################################################################################\ntrim_all_definition<-function(def_list){\n  def_list<- def_list %>%\n    mutate(definition= gsub(\" \\\\s*\\\\([^\\\\)]+\\\\)\",\"\", definition)) %>%\n    mutate(definition= gsub(\"[*].*$\",\"\", definition)) %>%\n    mutate(definition= gsub(\"\\\\/.*\", \"\", definition)) %>%\n    filter(definition!= \"babysitter's name\", \n           definition!= \"child's own name\", \n           definition!= \"pet's name\") %>%\n    mutate(definition= gsub(\"[[:punct:]]\", \"\", definition)) \n  \n  return(def_list)\n}\n######################################################################################################################\ntrim_unilemma<-function(unilemma_list){\n  unilemma_list<- unilemma_list %>%\n    mutate(uni_lemma= gsub(\"[*].*$\",\"\", uni_lemma)) %>%\n    mutate(uni_lemma= gsub(\"\\\\/.*\", \"\", uni_lemma)) %>%\n    #    mutate(uni_lemma=if_else(grepl(\" \\\\(animal\\\\)\",uni_lemma),gsub(\" \\\\(animal\\\\)\",\"\", uni_lemma),uni_lemma)) %>%\n    #    mutate(uni_lemma=if_else(grepl(\" \\\\(object\\\\)\",uni_lemma),gsub(\" \\\\(object\\\\)\",\"\", uni_lemma),uni_lemma)) %>%\n    filter(!is.na(uni_lemma))\n  return(unilemma_list)\n}\n\n######################################################################################################################\ntrim_definition<-function(def_list){\n  def_list<- def_list %>%\n    mutate(definition= gsub(\"[*].*$\",\"\", definition)) %>%\n    mutate(definition= gsub(\"\\\\/.*\", \"\", definition)) \n  return(def_list)\n}\n######################################################################################################################\nwrite_out_csv<-function(name){\n  write.csv(paste(getwd(),\"/out_files/\",name, sep = \"\" ))\n}\n######################################################################################################################\nwrite_out_csv<- function(var, lang, type){\n  write.csv(var, paste(getwd(),\"/out_files/\",lang, \"_\",type,\".csv\",sep = \"\"), row.names = F)\n}\n",
    "created" : 1524767437809.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2728929542",
    "id" : "821D603E",
    "lastKnownWriteTime" : 1524767585,
    "last_content_update" : 1524767585967,
    "path" : "~/Documents/Experiments/conceptNet/helpers/wb_helper.r",
    "project_path" : "helpers/wb_helper.r",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}